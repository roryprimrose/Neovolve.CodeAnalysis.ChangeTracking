name: CI

on:
  push:
    branches:    
      - '**'
  pull_request:
    branches:    
      - '**'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:

    - name: Checkout
      uses: actions/checkout@v2

    - name: ResolveProject
      shell: pwsh
      run: Write-Host "::set-env name=PROJECT_NAME::$(${env:GITHUB_REPOSITORY}.substring(${env:GITHUB_REPOSITORY}.IndexOf('/') + 1))"
      
    - name: Fetch all history for all tags and branches
      run: git fetch --prune --unshallow

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.4
      with:
          versionSpec: '5.2.x'
    
    - name: Use GitVersion
      id: gitversion # step id used as reference for output values
      uses: gittools/actions/gitversion/execute@v0.9.4

    - name: Update project version
      uses: roryprimrose/set-vs-sdk-project-version@v1
      with:
        version: ${{ steps.gitversion.outputs.NuGetVersionV2 }}
        assemblyVersion: ${{ steps.gitversion.outputs.AssemblySemVer }}
        fileVersion: ${{ steps.gitversion.outputs.MajorMinorPatch }}
        informationalVersion: ${{ steps.gitversion.outputs.InformationalVersion }}  

    - name: Restore
      run: dotnet restore

    - name: Build
      run: dotnet build -c Release --no-restore

    - name: Test
      run: dotnet test -c Release --no-build /p:CollectCoverage=true /p:CoverletOutput="$GITHUB_WORKSPACE/coverage/lcov.info" /p:MergeWith="$GITHUB_WORKSPACE/coverage/lcov.info" /p:CoverletOutputFormat=lcov                                                       
    
    - name: Coveralls
      uses: coverallsapp/github-action@master
      with:
        github-token: ${{ secrets.github_token }}
        path-to-lcov: /home/runner/work/${{ env.PROJECT_NAME }}/${{ env.PROJECT_NAME }}/coverage/lcov.info
    
    - name: Pack
      run: dotnet pack "./${{ env.PROJECT_NAME }}/${{ env.PROJECT_NAME }}.csproj" -c Release --no-build --include-symbols -o ./staging

    - name: Publish build artifacts
      uses: actions/upload-artifact@master
      with:
        name: packages
        path: ./staging
    
    - name: Publish to MyGet.org
      env: 
        MYGET_APIKEY: ${{ secrets.MYGET_APIKEY }}
      run: dotnet nuget push ./staging/${{ env.PROJECT_NAME }}.*.symbols.nupkg --api-key $MYGET_APIKEY --source https://www.myget.org/F/neovolve/api/v2/package
      if: github.event_name == 'pull_request'

    - name: Publish to NuGet.org
      env: 
        NUGET_APIKEY: ${{ secrets.NUGET_APIKEY }}
      run: dotnet nuget push ./staging/${{ env.PROJECT_NAME }}.*.symbols.nupkg --api-key $NUGET_APIKEY --source https://api.nuget.org/v3/index.json
      if: github.ref == 'refs/heads/master'

    - name: Add GitHub registry to NuGet config
      run: dotnet nuget add source https://nuget.pkg.github.com/roryprimrose/index.json --name "GPR" --username  roryprimrose --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text
      if: github.ref == 'refs/heads/master'

    - name: Push generated package to GitHub registry
      run: dotnet nuget push ./staging/${{ env.PROJECT_NAME }}.*.symbols.nupkg --source "GPR"
      if: github.ref == 'refs/heads/master'

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1.1.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.gitversion.outputs.NuGetVersionV2 }}
        release_name: Release ${{ steps.gitversion.outputs.NuGetVersionV2 }}
        draft: false
        prerelease: ${{ contains(steps.gitversion.outputs.NuGetVersionV2, 'beta') }}
      if: github.ref == 'refs/heads/master'
    
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1.0.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ format('./staging/{0}.{1}.symbols.nupkg', env.PROJECT_NAME, steps.gitversion.outputs.NuGetVersionV2) }}
        asset_name: ${{ format('{0}.{1}.nupkg', env.PROJECT_NAME, steps.gitversion.outputs.NuGetVersionV2) }}
        asset_content_type: application/zip
      if: github.ref == 'refs/heads/master'
